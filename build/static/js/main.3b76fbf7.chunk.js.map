{"version":3,"sources":["components/Header.js","components/Form.js","components/Recipe.js","components/RecipeList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Form","onChange","onSubmit","searchValue","placeholder","name","type","value","Recipe","data","useState","showIngredients","setShowIngredients","id","recipe","label","src","image","alt","onClick","ingredients","map","ingredient","key","text","calories","toFixed","RecipeList","recipesToList","App","recipes","setRecipes","search","setSearch","query","setQuery","getRecipes","a","fetch","response","json","console","log","hits","useEffect","e","target","preventDefault","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6VAWeA,MARf,WACI,OACI,4BAAQC,UAAU,UACd,wBAAIA,UAAU,gBAAd,c,MCOGC,MAXf,YAAoD,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAChC,OACI,yBAAKJ,UAAU,eACX,0BAAMG,SAAUA,GACZ,2BAAOD,SAAUA,EAAUF,UAAU,aAAaK,YAAY,oBAAoBC,KAAK,aAAaC,KAAK,OAAOC,MAAOJ,IACvH,4BAAQJ,UAAU,iBAAlB,a,KC6BDS,MAhCf,YAA2B,IAATC,EAAQ,EAARA,KAAQ,EAEwBC,oBAAS,GAFjC,mBAEfC,EAFe,KAEEC,EAFF,KAUtB,OACI,yBAAKC,GAAG,mBAAmBd,UAAWY,EAAkB,OAAS,MAC7D,wBAAIZ,UAAU,SAASU,EAAKK,OAAOC,OAGnC,yBAAKC,IAAKP,EAAKK,OAAOG,MAAOC,IAAKT,EAAKK,OAAOC,QAI9C,4BAAQI,QAbU,WAEtBP,GAAoBD,IAWoBZ,UAAU,eAA9C,oBACA,yBAAKc,GAAG,cAAcd,UAAWY,EAAkB,OAAS,MACnD,2CACAF,EAAKK,OAAOM,YAAYC,KAAI,SAACC,EAAYC,GACxC,OAAQ,wBAAIA,IAAKA,GAAMD,EAAWE,UAIxC,+CAAiBf,EAAKK,OAAOW,SAASC,QAAQ,O,MCnB/CC,MARf,YAAwC,IAAlBC,EAAiB,EAAjBA,cAClB,OACI,yBAAK7B,UAAU,eACV6B,EAAcP,KAAI,SAACP,EAAQS,GAAT,OAAiB,kBAAC,EAAD,CAAQA,IAAKA,EAAKd,KAAMK,S,MCGxE,SAASe,IAET,IAFe,EAKenB,mBAAS,IALxB,mBAKRoB,EALQ,KAKCC,EALD,OAMarB,mBAAS,IANtB,mBAMRsB,EANQ,KAMAC,EANA,OAOWvB,mBAAS,OAPpB,mBAORwB,EAPQ,KAODC,EAPC,KAcTC,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCJ,EAApC,mBAbf,WAae,oBAZd,qCAWG,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEX/B,EAFW,OAGjBgC,QAAQC,IAAIjC,GACZsB,EAAWtB,EAAKkC,MAJC,2CAAH,qDA0Bd,OAJFC,qBAAU,WACRR,MACC,CAACF,IAGA,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAME,SAtBS,SAAC4C,GAEpBJ,QAAQC,IAAI,2BACZT,EAAUY,EAAEC,OAAOvC,OACnBkC,QAAQC,IAAIG,EAAEC,OAAOvC,QAkBaL,SAdlB,SAAA2C,GAChBJ,QAAQC,IAAI,0BACZG,EAAEE,iBACFZ,EAASH,GACTC,EAAU,KAU6C9B,YAAa6B,IAEhE,kBAAC,EAAD,CAAYJ,cAAeE,KAMjCkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAElCtB,QCnDKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASC,eAAe,SDyHpB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.3b76fbf7.chunk.js","sourcesContent":["import React from 'react'\nimport '../scss/Header.scss'\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <h1 className=\"header-title\">CookBook</h1>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport '../scss/Form.scss'\nfunction Form( {onChange, onSubmit, searchValue} ) {\n    return (\n        <div className=\"search-form\">\n            <form onSubmit={onSubmit}>\n                <input onChange={onChange} className=\"search-bar\" placeholder=\"Search recipes...\" name=\"recipeName\" type=\"text\" value={searchValue}></input>\n                <button className=\"search-button\">Search</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Form\n","import React, { useState } from 'react'\nimport '../scss/Recipe.scss'\n\n\nfunction Recipe( {data} ) {\n\n    const [showIngredients, setShowIngredients] = useState(false);\n\n\n\n    const toggleIngredients = () => {\n\n        setShowIngredients(!showIngredients);\n    }\n    return (\n        <div id=\"recipe-container\" className={showIngredients ? \"cool\" : null}>\n            <h1 className=\"title\">{data.recipe.label}</h1>\n           \n           \n            <img src={data.recipe.image} alt={data.recipe.label}></img>\n           \n           \n               \n            <button onClick={toggleIngredients} className=\"show-button\">Show ingredients</button>\n            <div id=\"ingredients\" className={showIngredients ? \"cool\" : null}>\n                     <h3>Ingredients</h3>\n                    {data.recipe.ingredients.map((ingredient, key) => {\n                      return  <li key={key}>{ingredient.text}</li>\n                    })}\n                   \n                </div>\n                <p>{`Calories: ${data.recipe.calories.toFixed(0)}`}</p>\n        </div>\n    )\n}\n\nexport default Recipe\n","import React from 'react'\nimport Recipe from './Recipe'\nimport '../scss/RecipeList.scss'\n\nfunction RecipeList({ recipesToList }) {\n    return (\n        <div className=\"recipe-list\">\n            {recipesToList.map((recipe, key) => <Recipe key={key} data={recipe}/>)}\n        </div>\n    )\n}\n\nexport default RecipeList\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Recipe from './components/Recipe';\nimport RecipeList from './components/RecipeList';\nimport './scss/App.scss';\nimport TestBootstrap from './components/TestBootstrap';\n\n\nfunction App() {\n\nconst APP_ID = \"62fefcde\";\nconst APP_KEY = \"83b6422d00cdd69f87ee9e6b0e3df12e\";\n\nconst [recipes, setRecipes] = useState([]);\nconst [search, setSearch] = useState('');\nconst [query, setQuery] = useState(\"all\");\n// const getRecipes =  (e) => {\n//   e.preventDefault();\n//   const recipeName = e.target.elements.recipeName.value;\n//   console.log(recipeName);\n// }\n\nconst getRecipes = async () => {\n  const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n  const data = await response.json();\n  console.log(data);\n  setRecipes(data.hits);\n}\n\nconst updateSearch = (e) => {\n  \n  console.log(\"Im in the update search\");\n  setSearch(e.target.value);\n  console.log(e.target.value);\n}\n\n\nconst getSearch = e => {\n  console.log(\"Im in getSearch method\");\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\nuseEffect(() => {\n  getRecipes();\n}, [query])\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Form onChange={updateSearch} onSubmit={getSearch} searchValue={search}/>\n      \n      <RecipeList recipesToList={recipes} />\n      {/* <TestBootstrap /> */}\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}